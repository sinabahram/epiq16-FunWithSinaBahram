use Libraries.Containers.Array
use Libraries.Compute.Random
use Libraries.Compute.Math

use Libraries.Game.Game
use Libraries.Game.Graphics.Model
use Libraries.Game.Graphics.Camera
use Libraries.Game.Graphics.AmbientLight
use Libraries.Game.Graphics.DirectionalLight

use Libraries.Game.InputMonitor
use Libraries.Game.Audio3D
use Libraries.Game.Graphics.Color
use Libraries.Game.Graphics.Drawable
use Libraries.Interface.Events.all
use Libraries.Compute.Random

class Main is Game, KeyboardListener
Array<Audio3D> tones
Audio3D chirp
Camera camera = undefined

Color color
Random random

InputMonitor monitor
KeyboardEvent keys

number rotateValue = 0.0

    action Main
        SetScreenSize(1024, 768)
        StartGame()
    end

    action CreateGame
InitializeChirp()
InitializeTones()
AddKeyboardListener(me)
InitializeLight()
InitializeCamera()
Initialize3DCrosses()
end

action InitializeChirp()
chirp = CustomAudio3D("../sounds/chirp.wav")
chirp:EnableLooping()
end

action InitializeLight()
        DirectionalLight light
        light:SetDirection(100, 100, 100)
        light:SetColor(0.8, 0.8, 0.8, 1)
        Add(light)
        
        AmbientLight ambient
        ambient:SetColor(0.4, 0.4, 0.4, 1)
        SetAmbientLight(ambient)
end

action InitializeCamera()
camera = GetCamera3D()
camera:SetPosition(40, 80, -80)
camera:LookAt(0, 0, 0)
end

action MakeCross(Color color) returns Model
Model x
Model y
Model z
Model cross
length = 10.0
x:LoadCylinder(length, 1.0, 1.0, color)
y:LoadCylinder(1.0, length, 1.0, color)
z:LoadCylinder(1.0, 1.0, length, color)
cross:Add(x)
cross:Add(y)
cross:Add(z)
return cross
end

action AddAndMoveCross(number x, number y, number z, Color color)
Model cross = MakeCross(color)
Add(cross)
PlayRandomTones(3, false)
StartSonifying(cross)
cross:Move(x, y, z)
StopSonifying(cross)
end

action StartSonifying(Model model)
model:Add(chirp)
chirp:Play()
end

action StopSonifying(Model model)
chirp:Stop()
model:Remove(chirp)
end

action Initialize3DCrosses
AddAndMoveCross(-50, 0, 0, color:Red())
AddAndMoveCross(50, 0, 0, color:Red())
AddAndMoveCross(0, -50, 0, color:Green())
AddAndMoveCross(0, 50, 0, color:Green())
AddAndMoveCross(0, 0, -50, color:Blue())
AddAndMoveCross(0, 0, 50, color:Blue())
end

action CustomAudio3D(text filename) returns Audio3D
Audio3D audio
audio:Load(filename)
return audio
end

action InitializeTones()
counter = 0
repeat 10 times
tones:Add(CustomAudio3D("../sounds/"+counter+".wav"))
counter = counter+1
end
end

action PlayRandomTone(boolean position)
Audio3D tone = tones:Get(random:RandomIntegerBetween(0, 9))
if position
tone:SetPosition(random:RandomIntegerBetween(-10, 10), random:RandomIntegerBetween(-10, 10), random:RandomIntegerBetween(-10, 10))
end
tone:PlayUntilDone()
end

action PlayRandomTones(integer count, boolean position)
repeat count times
PlayRandomTone(position)
end
end

    action Update(number seconds)
chirp:Rotate(rotateValue)
end

    action PressedKey(KeyboardEvent event)
if event:keyCode = event:SPACE
if chirp:IsPlaying()
chirp:Stop()
else
chirp:Play()
end
        elseif event:keyCode = event:R
PlayRandomTone(true)
        elseif event:keyCode = event:S
PlayRandomTones(random:RandomIntegerBetween(2, 100), true)
        elseif event:keyCode = event:UP
// todo
        elseif event:keyCode = event:DOWN
// todo
        elseif event:keyCode = event:LEFT
// todo
        elseif event:keyCode = event:RIGHT
// todo
        elseif event:keyCode = event:PAGE_UP
// todo
        elseif event:keyCode = event:PAGE_DOWN
// todo
        elseif event:keyCode = event:U
// todo
        elseif event:keyCode = event:D
// todo
        elseif event:keyCode = event:LEFT_BRACKET
rotateValue = rotateValue+0.25
        elseif event:keyCode = event:RIGHT_BRACKET
rotateValue = rotateValue-0.25
end
end
end
